#!/usr/bin/env bash

### PATH ###
if [ -d "$HOME/.bin" ] ;
  then PATH="$HOME/.bin:$PATH"
fi

if [ -d "$HOME/.local/bin" ] ;
  then PATH="$HOME/.local/bin:$PATH"
fi

if [ -d "$HOME/Applications" ] ;
  then PATH="$HOME/Applications:$PATH"
fi

#if dotnet installed via script we have to add it to the shell profile
#https://learn.microsoft.com/en-us/dotnet/core/install/linux-scripted-manual#manual-install
if command -v "$HOME/.dotnet/dotnet" &> /dev/null
then
    export PATH="$HOME/.dotnet:$HOME/.dotnet/tools:$PATH"
    export DOTNET_ROOT="$HOME/.dotnet"
fi

### EXPORT ###
export MANPAGER="sh -c 'col -bx | batcat -l man -p'"
export EDITOR="nvim"
export VISUAL="nvim"

# use node version manager (https://github.com/nvm-sh/nvm) to install latest nodejs and npm (required for lsp)
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

### SET VI MODE ###
# Comment this line out to enable default emacs-like bindings
set -o vi
bind -m vi-command 'Control-l: clear-screen'
bind -m vi-insert 'Control-l: clear-screen'

### SHOPT ###

shopt -s autocd # change to named directory without using cd
shopt -s cdspell # autocorrects cd misspellings
shopt -s checkwinsize # check the window size after each command and, if necessary, update the values of LINES and COLUMNS.
shopt -s histappend # append to the history file, don't overwrite it
shopt -s expand_aliases # expand aliases
shopt -s globstar # If set, the pattern "**" used in a pathname expansion context will match all files and zero or more directories and subdirectories.

# If not running interactively, don't do anything
case $- in
	*i*) ;;
	*) return;;
esac

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
	if [ -f /usr/share/bash-completion/bash_completion ]; then
		. /usr/share/bash-completion/bash_completion
	elif [ -f /etc/bash_completion ]; then
		. /etc/bash_completion
	fi
fi

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
	debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
	xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

#if [ -n "$force_color_prompt" ]; then
#	if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
#		# We have color support; assume it's compliant with Ecma-48
#		# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
#		# a case would tend to support setf rather than setaf.)
#		color_prompt=yes
#	else
#		color_prompt=
#	fi
#fi

#if [ "$color_prompt" = yes ]; then
#	PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
#else
#	PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
#fi
#unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
#case "$TERM" in
#	xterm*|rxvt*)
#		PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
#		;;
#	*)
#		;;
#esac


### Command History ###

HISTSIZE=1000
HISTFILESIZE=2000
HISTTIMEFORMAT="%d/%m/%y %T " # show the date and time when running the history command
HISTCONTROL=ignoredups:erasedups # don't put duplicate lines or lines starting with space in the history.

### Alias ###

alias ls='ls --color=auto'
alias ll='ls -alF --group-dirs first'
alias la='ls -A'
alias l='ls -l'

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

alias vim='nvim'

# Add an "alert" alias for long running commands.  Use like so: sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Hunt down disk space hogs with ducks
alias ducks='du -cks * | sort -rn | head'

# confirm before overwriting something
alias cp="cp -i"
alias mv='mv -i'
alias rm='rm -i'

# Modern Unix
function ls() {
	if command -v /usr/bin/lsd &> /dev/null
	then
		/usr/bin/lsd "$@"
	else
		/bin/ls "$@"
	fi
}

function tree() {
	if command -v /usr/bin/lsd &> /dev/null
	then
		/usr/bin/lsd --tree "$@"
	else
		/bin/tree "$@"
	fi
}

function cat() {
	if command -v /usr/bin/batcat &> /dev/null
	then
		/usr/bin/batcat "$@"
	else
		/bin/cat "$@"
	fi
}

# Setting the starship prompt
eval "$(starship init bash)"

# Setting Z replacement (zoxide)
eval "$(zoxide init bash)"
